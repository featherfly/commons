/*
 *
 * Copyright (c) 2006-2020, Speedment, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package cn.featherfly.common.tuple.internal.nonnullable.mapper;

import cn.featherfly.common.tuple.Tuple0;
import cn.featherfly.common.tuple.TupleMapper;
import cn.featherfly.common.tuple.Tuples;
import cn.featherfly.common.tuple.internal.AbstractTupleMapper;

/**
 * An implementation class of a {@link TupleMapper } of degree 0
 * <p>
 * Generated by com.speedment.sources.pattern.tuple.TupleMapperImplPattern
 * 
 * @param <T> Type of the original object for the mapper to use when creating a
 *            {@code Tuple }
 * 
 * @author Per Minborg
 */
public final class Tuple0MapperImpl<T> 
extends AbstractTupleMapper<T, Tuple0> 
implements TupleMapper<T, Tuple0> {
    
    public static final Tuple0MapperImpl<?> EMPTY_MAPPER = new Tuple0MapperImpl<>();
    
    /**
     * Constructs a {@link TupleMapper } that can create {@link Tuple0 }.
     */
    private Tuple0MapperImpl() {
        super(0);
    }
    
    @Override
    public Tuple0 apply(T t) {
        return Tuples.of(
            
        );
    }
}