allprojects {
    apply from: rootDir.getAbsolutePath() + '/java_base.gradle'   
    apply from: rootDir.getAbsolutePath() + '/maven_push.gradle'
        
    ext {
    }

    dependencies {
        api group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
        //implementation 'org.slf4j:slf4j-log4j12:1.7.30'
        
        testImplementation (
            'org.testng:testng:7.5.1',
            'org.slf4j:slf4j-log4j12:1.7.30'
        )
        testImplementation group: 'com.google.inject', name: 'guice', version: '4.2.3'
    }
}
    
dependencies {
    //implementation project(':common-core')
    //compile 'cn.featherfly:featherfly-common:1.8.11'
    //implementation project(":common-gentool");
    implementation "cn.featherfly.common:common-gentool:0.2.2";
    implementation 'cn.featherfly.common:common-bean-javassist:1.4.2'
    implementation 'commons-beanutils:commons-beanutils:latest.integration'
    implementation 'javassist:javassist:3.12.1.GA'
    implementation 'com.alibaba:fastjson:1.1.41'
    implementation 'org.slf4j:slf4j-log4j12:1.6.1'
    implementation 'log4j:log4j:1.2.16'
    
    implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.0.18.Final'
    implementation group: 'org.thymeleaf', name: 'thymeleaf', version: '3.0.11.RELEASE'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.9'
}
/*
test {
    useTestNG()
    testLogging.showStandardStreams = true
    minHeapSize = "128m"
    maxHeapSize = "512m"
    jvmArgs '-XX:MaxPermSize=256m'
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}
*/

ext {
    exceptions = [
            ['yaml':'gentool/exceptions/SerializationException.yaml', 'taskName' : 'SerializationException']
    ]
}

def generateExceptionCodeAll = task("all-exception-code", group: 'gen-code-exception') {}
exceptions.each { code ->
    def generateExceptionCode = task("${code.taskName}-exception-code", type: JavaExec, dependsOn: 'classes', group : 'gen-code-exception') {
        classpath = sourceSets.main.runtimeClasspath
        mainClass = "cn.featherfly.common.gentool.exception.GeneratorRunner"
        args = ['gentool/config.yaml', code.yaml]
    }
    generateExceptionCodeAll.dependsOn(generateExceptionCode)
}